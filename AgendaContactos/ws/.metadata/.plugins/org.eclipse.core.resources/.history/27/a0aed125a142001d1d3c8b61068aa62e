package agenda.model;

import java.util.Arrays;
import agenda.exceptions.ReunionExcepciones;

public class Reunion {

	// Declaracion de atributos
	private String id;
	private String descripcion;
	private String fecha;
	private String hora;
	private Contacto[] contactosReunion;

	/**
	 * Constructor de la clase Reunion
	 *
	 * @param descripcion
	 * @param fecha
	 * @param hora
	 * @param contactosReunion
	 */
	public Reunion(String id, String descripcion, String fecha, String hora, Contacto[] contactosReunion) {
		super();
		this.id = id;
		this.descripcion = descripcion;
		this.fecha = fecha;
		this.hora = hora;
		this.contactosReunion = contactosReunion;
	}

	/**
	 * get id
	 *
	 * @return
	 */
	public String getId() {
		return id;
	}

	/**
	 * set id
	 *
	 * @param id
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * get descripcion
	 *
	 * @return
	 */
	public String getDescripcion() {
		return descripcion;
	}

	/**
	 * set descripcion
	 *
	 * @param descripcion
	 */
	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	/**
	 * get fecha
	 *
	 * @return
	 */
	public String getFecha() {
		return fecha;
	}

	/**
	 * set fecha
	 *
	 * @param fecha
	 */
	public void setFecha(String fecha) {
		this.fecha = fecha;
	}

	/**
	 * get hora
	 *
	 * @return
	 */
	public String getHora() {
		return hora;
	}

	/**
	 * set hora
	 *
	 * @param hora
	 */
	public void setHora(String hora) {
		this.hora = hora;
	}

	/**
	 * get contactosReunion
	 *
	 * @return
	 */
	public Contacto[] getContactosReunion() {
		return contactosReunion;
	}

	/**
	 * set contactos reunion
	 *
	 * @param contactosReunion
	 */
	public void setContactosReunion(Contacto[] contactosReunion) {
		this.contactosReunion = contactosReunion;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/**
	 * Este metodo compara dos reuniones
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Reunion other = (Reunion) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	/**
	 * Este metodo convierte en cadena los atributos de la clase
	 */
	@Override
	public String toString() {
		return "Reunion [id=" + id + ", descripcion=" + descripcion + ", fecha=" + fecha + ", hora=" + hora
				+ ", contactosReunion=" + Arrays.toString(contactosReunion) + "]";
	}

	//----------------------------------------------------------------------------------------------------------

	//Metodos adicionales

	/**
	 * Este metodo verifica si hay cupo en una reunion
	 *
	 * @return
	 * @throws ReunionExcepciones
	 */
	public boolean verificarCupo() throws ReunionExcepciones {
		boolean agregados = false;
		int posicionDisponible = -1;

		for (int i = 0; i < contactosReunion.length && posicionDisponible == -1; i++) {
			if (contactosReunion[i] == null) {
				agregados = true;
			}
		}
		if (posicionDisponible == -1) {
			throw new ReunionExcepciones("No hay cupo");
		}
		return agregados;
	}

	/**
	 * Este metodo agrega contactos a un grupo
	 *
	 * @param contacto
	 */
	public void agregarContactos(Contacto contacto) {
		boolean flag = false;
		for (int i = 0; i < contactosReunion.length; i++) {
			if (contactosReunion == null && !flag) {
				contactosReunion[i] = contacto;
				flag = true;
			}
		}
	}

}
